@using MaterialStatus.Features.SWG.Models
@using MaterialStatus.Service

@foreach (var item in ViewData["LagerG"] as List<MaterialStatus.Features.SWG.Models.tbl_lager>)
    {
        if (item.id >= Config.FirstSyloId_SWG & item.id <= Config.LastSyloId_SWG) 
        {
<article class="lager-place">
    <h2 class="lager-header">
        Silo: <span class="lager-header-accent">@item.bezeichnung</span>
        / Füllstand: <span class="lager-header-accent">@Math.Round(item.bestand_aktuell / 1000, 2) T</span>
    </h2>

    @{string materialName = "nicht gefunden";
        foreach (var row in ViewData["MaterialG"] as List<MaterialStatus.Features.SWG.Models.tbl_material>)
        {
            if (item.fid_material == row.id)
            {
                materialName = row.bezeichnung;
                break;
            }
        } 
    }

<div class="lager-paragraph-wrapper">
    <p class="lager-paragraph">Material: </p>
    <p class="lager-paragraph-accent">@materialName</p>
</div> 
    
<div class="lager-display-wrapper">
    <img class="lager-image" src="~/images/img_silo.png"/>
    <div class="lager-scale-wrapper">
        <ul class="scale">
            @for (int y = 99; y >= 0; y-= 2)
            {
                if (y < Math.Round(item.bestand_aktuell / 1000, 2))
                {
                    if (Math.Round(item.bestand_aktuell / 1000, 2) >= 100)
                    {
                        <li class="scale-item scale-item-overflow"></li>
                    }
                    else
                    {
                        <li class="scale-item scale-item-normal"></li>
                    }
                }
                else
                {
                    <li class="scale-item scale-item-incomplete"></li>
                }
            }
        </ul>
        <p class="lager-scale-value">
            @Math.Round(item.bestand_aktuell * 100 / item.bestand_max, 1)<span>%</span>
        </p>
    </div>
</div>
</article>
        }
    
    }
