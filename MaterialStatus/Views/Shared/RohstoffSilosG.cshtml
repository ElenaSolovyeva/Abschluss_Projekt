@using MaterialStatus.Features.SWG.Models
@using MaterialStatus.Service

@foreach (var silo in ViewData["RohstoffSilos"] as List<String?>)
{
    foreach (var lagerG in ViewData["LagerG"] as List<MaterialStatus.Features.SWG.Models.tbl_lager>)
    {

        foreach (var materialG in ViewData["MaterialG"] as List<MaterialStatus.Features.SWG.Models.tbl_material>)
        {
            if (lagerG.fid_material == materialG.id && lagerG.sap_bezeichnung == silo)
            {
<article class="lager-place">
    <h2 class="lager-header">
        <span class="lager-header-accent">@lagerG.sap_bezeichnung</span>
        / Füllstand: <span class="lager-header-accent">
            @Math.Round(lagerG.bestand_aktuell / 1000, 2) T
        </span>
    </h2>

    <div class="lager-paragraph-wrapper">
        <p class="lager-paragraph">Material: </p>
        <p class="lager-paragraph-accent">@materialG.bezeichnung</p>
    </div>

    <div class="lager-display-wrapper">
        <img class="lager-image" src="~/images/img_silo.png" />
        <div class="lager-scale-wrapper">
            <ul class="scale">
                @for (int y = 99; y >= 0; y -= 2)
                {
                    if (y < Math.Round(lagerG.bestand_aktuell / 1000, 2))
                    {
                        if (Math.Round(lagerG.bestand_aktuell / 1000, 2) >= 100)
                        {
                            <li class="scale-item scale-item-overflow"></li>
                        }
                        else
                        {
                            <li class="scale-item scale-item-normal"></li>
                        }
                    }
                    else
                    {
                        <li class="scale-item scale-item-incomplete"></li>
                    }
                }
            </ul>
            <p class="lager-scale-value">
                @Math.Round(lagerG.bestand_aktuell * 100 / lagerG.bestand_max, 1)<span>%</span>
            </p>
        </div>
    </div>

</article>
            }
        }
    }
}
